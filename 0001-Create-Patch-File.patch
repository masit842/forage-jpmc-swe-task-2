From 2b3a489d8fb05955d92caa207d858fabb50b4678 Mon Sep 17 00:00:00 2001
From: Asit Kumar Mondal <masit842@gmail.com>
Date: Sat, 22 Jun 2024 00:39:49 +0530
Subject: [PATCH] Create Patch  File

---
 src/App.tsx   |  27 ++++++++++++-
 src/Graph.tsx | 104 +++++++++++++++++++++++++++++++++++++++++++-------
 2 files changed, 115 insertions(+), 16 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..e08bd4c 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,39 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if(this.state.showGraph){
     return (<Graph data={this.state.data}/>)
   }
-
+}
   /**
    * Get new data from server and update the state with the new data
    */
+  // getDataFromServer() {
+  //   let x=0;
+  //   const interval =setInterval(() =>{
+  //   DataStreamer.getData((serverResponds: ServerRespond[]) => {
+  //     // Update the state by creating a new array of data that consists of
+  //     // Previous data in the state and the new data from server
+  //     this.setState({ data: [...this.state.data, ...serverResponds] });
+  //   });
+  // }
   getDataFromServer() {
+    let x=0;
+    const interval =setInterval(() => {
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      this.setState({
+        data: serverResponds,
+        showGraph: true,
+ 
     });
+  });
+  x++;
+  if (x>1000){
+    clearInterval(interval);
+  }
+},100);
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..76341dc 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,23 +1,96 @@
+// import React, { Component } from 'react';
+// import { Table } from '@finos/perspective';
+// import { ServerRespond } from './DataStreamer';
+// import './Graph.css';
+
+// /**
+//  * Props declaration for <Graph />
+//  */
+// interface IProps {
+//   data: ServerRespond[],
+// }
+
+// /**
+//  * Perspective library adds load to HTMLElement prototype.
+//  * This interface acts as a wrapper for Typescript compiler.
+//  */
+// interface PerspectiveViewerElement {
+//   load: (table: Table) => void,
+// }
+
+// /**
+//  * React component that renders Perspective based on data
+//  * parsed from its parent through data property.
+//  */
+// class Graph extends Component<IProps, {}> {
+//   // Perspective table
+//   table: Table | undefined;
+
+//   render() {
+//     return React.createElement('perspective-viewer');
+//   }
+
+//   componentDidMount() {
+//     // Get element to attach the table from the DOM.
+//     const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+
+//     const schema = {
+//       stock: 'string',
+//       top_ask_price: 'float',
+//       top_bid_price: 'float',
+//       timestamp: 'date',
+//     };
+
+//     if (window.perspective && window.perspective.worker()) {
+//       this.table = window.perspective.worker().table(schema);
+//     }
+//     if (this.table) {
+//       // Load the `table` in the `<perspective-viewer>` DOM reference.
+
+//       // Add more Perspective configurations here.
+//       elem.load(this.table);
+//     }
+//   }
+
+//   componentDidUpdate() {
+//     // Everytime the data props is updated, insert the data into Perspective table
+//     if (this.table) {
+//       // As part of the task, you need to fix the way we update the data props to
+//       // avoid inserting duplicated entries into Perspective table again.
+//       this.table.update(this.props.data.map((el: any) => {
+//         // Format the data from ServerRespond to the schema
+//         return {
+//           stock: el.stock,
+//           top_ask_price: el.top_ask && el.top_ask.price || 0,
+//           top_bid_price: el.top_bid && el.top_bid.price || 0,
+//           timestamp: el.timestamp,
+//         };
+//       }));
+//     }
+//   }
+// }
+
+// export default Graph;
 import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
+import { Table } from '@jpmorganchase/perspective';
 import { ServerRespond } from './DataStreamer';
 import './Graph.css';
-
+ 
 /**
  * Props declaration for <Graph />
  */
 interface IProps {
   data: ServerRespond[],
 }
-
+ 
 /**
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
-
+ 
 /**
  * React component that renders Perspective based on data
  * parsed from its parent through data property.
@@ -25,33 +98,37 @@ interface PerspectiveViewerElement {
 class Graph extends Component<IProps, {}> {
   // Perspective table
   table: Table | undefined;
-
+ 
   render() {
     return React.createElement('perspective-viewer');
   }
-
+ 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
+    const elem= document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
     const schema = {
       stock: 'string',
       top_ask_price: 'float',
       top_bid_price: 'float',
       timestamp: 'date',
     };
-
+ 
     if (window.perspective && window.perspective.worker()) {
       this.table = window.perspective.worker().table(schema);
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
-
+ 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('column-pivots','["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates','{"stock":"distinct count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}');
     }
   }
-
+ 
   componentDidUpdate() {
     // Everytime the data props is updated, insert the data into Perspective table
     if (this.table) {
@@ -69,5 +146,4 @@ class Graph extends Component<IProps, {}> {
     }
   }
 }
-
-export default Graph;
+export default Graph;
\ No newline at end of file
-- 
2.45.2.windows.1

